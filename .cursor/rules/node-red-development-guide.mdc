---
description:
globs:
alwaysApply: false
---
# Node-RED Development Guide for Todomill

## Development Workflow

### Core Principle
**Edit source files, not JSON flows directly**
- Modify: `HtmlFromTemplateNode/*.html` and `JavascriptFromFunctionNode/*.js`
- Deploy: Copy changes through Node-RED GUI
- Reference: `ExportedNodeRedTabs/*.json` for verification only

### File Organization
```
Todomill_projectorium/
├── HtmlFromTemplateNode/        # UI templates (edit these)
│   ├── TodoLog.html            # Activity log display
│   └── TodoEdit.html           # Todo item editor
├── JavascriptFromFunctionNode/  # Backend logic (edit these)
│   └── EditActions.js          # Message routing logic
└── ExportedNodeRedTabs/        # Flow exports (reference only)
    └── todo-dash-masterfile.json
```

## Message Flow Architecture

### Standard Pattern
```
UI Action → Router → Validator → Database → Response → UI Update
```

### Message Topics Convention
**Requests (UI → Backend):**
- `todo/action/[operation]` - General todo operations
- `todo/log/[action]/request` - Log-specific operations
- `todo/filter/request` - Filter operations

**Responses (Backend → UI):**
- `todo/dashboard/[component]` - Data updates to UI
- `todo/log/[action]/response` - Log operation results
- `todo/action/response` - General operation results

### Topic Routing Examples
```javascript
// UI sends action
scope.send({
    topic: 'todo/log/revert/request',
    payload: {
        action: 'revert_log_entry',
        logId: entry.id,
        todoId: entry.todoId
    }
});

// Backend responds
{
    topic: 'todo/log/revert/response',
    payload: {
        success: true,
        data: {...},
        todoId: 'abc-123'
    }
}
```

## Node-RED Flow Structure

### Core Node Types
- **ui_template**: HTML/CSS/JS dashboard components
- **function**: JavaScript message processing
- **mongodb4**: Database operations
- **switch**: Message routing by topic/property
- **link in/out**: Flow connections
- **debug**: Development debugging

### Flow Template
```json
{
  "nodes": [
    {
      "type": "ui_template",
      "name": "Dashboard Input",
      "outputs": 1
    },
    {
      "type": "switch",
      "name": "Route by Topic",
      "property": "topic",
      "rules": [
        {"t": "eq", "v": "todo/log/revert/request"},
        {"t": "eq", "v": "todo/log/delete/request"}
      ]
    },
    {
      "type": "function",
      "name": "Validate Request",
      "func": "// validation logic"
    },
    {
      "type": "mongodb4",
      "name": "Database Operation"
    },
    {
      "type": "function",
      "name": "Format Response",
      "func": "// response formatting"
    }
  ]
}
```

## Backend Processing Patterns

### 1. Request Validation
```javascript
// Standard validation function node
const payload = msg.payload;
const topic = msg.topic;

// Required field validation
const required = ['todoId', 'logId'];
const missing = required.filter(field => !payload[field]);

if (missing.length > 0) {
    msg.payload = {
        success: false,
        error: `Missing required fields: ${missing.join(', ')}`,
        code: "VALIDATION_ERROR"
    };
    msg.topic = topic.replace('/request', '/response');
    return msg;
}

// Store original topic for response
flow.set('originalTopic', topic);
flow.set('todoId', payload.todoId);

// Route to database operation
switch (payload.action) {
    case 'revert_log_entry':
        msg.topic = 'database/revert';
        break;
    case 'delete_log_entry':
        msg.topic = 'database/delete';
        break;
    default:
        msg.payload = {
            success: false,
            error: "Unknown action: " + payload.action,
            code: "UNKNOWN_ACTION"
        };
        return msg;
}

return msg;
```

### 2. Database Operations
```javascript
// MongoDB4 node payload for operations
const operation = msg.payload.action;

switch (operation) {
    case 'revert_log_entry':
        msg.collection = 'todo_logs';
        msg.operation = 'findOne';
        msg.payload = [{
            "_id": {"$oid": msg.payload.logId}
        }, {
            "projection": {"changes": 1, "todoId": 1, "operation": 1}
        }];
        break;

    case 'delete_log_entry':
        msg.collection = 'todo_logs';
        msg.operation = 'deleteOne';
        msg.payload = [{
            "_id": {"$oid": msg.payload.logId}
        }];
        break;
}

return msg;
```

### 3. Response Formatting
```javascript
// Response handler function node
const originalTopic = flow.get('originalTopic');
const operation = flow.get('operation') || 'unknown';

// Handle MongoDB4 response formats (both old and new)
const isSuccess = msg.payload && (
    msg.payload.acknowledged ||           // New format
    (msg.payload.result && msg.payload.result.ok === 1)  // Old format
);

if (isSuccess) {
    const affected = msg.payload.modifiedCount ||
                    msg.payload.deletedCount ||
                    msg.payload.result?.nModified ||
                    msg.payload.result?.n || 0;

    msg.payload = {
        success: true,
        data: {
            operation: operation,
            affected: affected,
            timestamp: new Date().toISOString()
        },
        todoId: flow.get('todoId'),
        logId: flow.get('logId')
    };
} else {
    msg.payload = {
        success: false,
        error: msg.error || "Operation failed",
        code: "DATABASE_ERROR",
        operation: operation
    };
}

msg.topic = originalTopic.replace('/request', '/response');
return msg;
```

## Security and Validation

### Input Validation Checklist
```javascript
// Comprehensive validation function
function validateRequest(payload) {
    const errors = [];

    // UUID/ObjectId format validation
    if (payload.todoId && !/^[a-f\d-]{36}$/i.test(payload.todoId)) {
        errors.push('Invalid todoId format');
    }

    // Required fields per operation
    const requiredFields = {
        'revert_log_entry': ['todoId', 'logId', 'operation'],
        'delete_log_entry': ['todoId', 'logId']
    };

    const required = requiredFields[payload.action] || [];
    const missing = required.filter(field => !payload[field]);

    if (missing.length > 0) {
        errors.push(`Missing fields: ${missing.join(', ')}`);
    }

    return errors;
}
```

### Authorization Pattern
```javascript
// Authorization check function
const userId = msg.req?.user?.id || msg.headers?.['x-user-id'];
const operation = msg.payload.action;
const resourceId = msg.payload.todoId;

// Simple permission check (extend as needed)
if (!userId) {
    msg.payload = {
        success: false,
        error: "Authentication required",
        code: "AUTH_REQUIRED"
    };
    return msg;
}

// Store user context for audit logging
flow.set('userId', userId);
```

### Rate Limiting
```javascript
// Simple rate limiting
const rateLimit = flow.get('rateLimit') || {};
const userId = flow.get('userId') || 'anonymous';
const now = Date.now();
const windowMs = 60000; // 1 minute
const maxRequests = 30;

// Clean old entries
Object.keys(rateLimit).forEach(id => {
    if (now - rateLimit[id].timestamp > windowMs) {
        delete rateLimit[id];
    }
});

// Check rate limit
if (!rateLimit[userId]) {
    rateLimit[userId] = { count: 0, timestamp: now };
}

if (rateLimit[userId].count >= maxRequests) {
    msg.payload = {
        success: false,
        error: "Rate limit exceeded",
        code: "RATE_LIMIT"
    };
    return msg;
}

rateLimit[userId].count++;
flow.set('rateLimit', rateLimit);
```

## Error Handling

### Error Code Standards
- `VALIDATION_ERROR` - Invalid request data
- `AUTH_REQUIRED` - Authentication missing
- `AUTHORIZATION_ERROR` - Insufficient permissions
- `DATABASE_ERROR` - MongoDB operation failed
- `NOT_FOUND` - Requested resource not found
- `RATE_LIMIT` - Too many requests
- `UNKNOWN_ACTION` - Unsupported operation

### Error Response Format
```javascript
{
  success: false,
  error: "Human-readable error message",
  code: "ERROR_CODE",
  details: { /* Additional error context */ },
  timestamp: "2024-01-01T12:00:00Z"
}
```

## Testing and Debugging

### Debug Node Usage
```javascript
// Add debug information to messages
msg.debug = {
    originalTopic: msg.topic,
    timestamp: new Date().toISOString(),
    nodeId: 'validator-node',
    payload: JSON.stringify(msg.payload)
};

// Use debug nodes to capture message flow
return msg;
```

### Test Message Injection
```javascript
// Create test messages for flow testing
const testMessages = {
    revert: {
        topic: 'todo/log/revert/request',
        payload: {
            action: 'revert_log_entry',
            logId: 'test-log-id',
            todoId: 'test-todo-id',
            operation: 'update'
        }
    },
    delete: {
        topic: 'todo/log/delete/request',
        payload: {
            action: 'delete_log_entry',
            logId: 'test-log-id',
            todoId: 'test-todo-id'
        }
    }
};
```

## Performance Optimization

### Message Batching
```javascript
// Batch multiple operations
const batch = flow.get('operationBatch') || [];
batch.push(msg.payload);

if (batch.length >= 10 || msg.force) {
    msg.payload = batch;
    flow.set('operationBatch', []);
    return msg;
}

flow.set('operationBatch', batch);
return null; // Hold message
```

### Context Caching
```javascript
// Cache frequently accessed data
const cache = flow.get('dataCache') || {};
const cacheKey = `project_${msg.payload.project}`;

if (cache[cacheKey] && (Date.now() - cache[cacheKey].timestamp < 300000)) {
    msg.payload = cache[cacheKey].data;
    return msg;
}

// Cache miss - fetch from database
```

## MongoDB Integration Reference

### Connection Configuration
- Use mongodb4 nodes with connection pooling
- Set appropriate timeouts (maxTimeMS)
- Handle both old and new MongoDB response formats

### Common Query Patterns
```javascript
// Find operations
msg.payload = [
    { "status": "pending" },          // query
    { "sort": {"created_at": -1} }    // options
];

// Update operations
msg.payload = [
    { "id": todoId },                 // filter
    { "$set": updateData }            // update
];

// Aggregation pipelines
msg.payload = [
    [
        { "$match": { "project": project } },
        { "$group": { "_id": "$status", "count": { "$sum": 1 } } }
    ]
];
```

## Related Resources
- [UI Patterns](mdc:todomill-ui-patterns.mdc) - Frontend integration
- [MongoDB Reference](mdc:mongodb-technical-reference.mdc) - Database operations
- [Development Index](mdc:todomill-development-index.mdc) - Main navigation

---
description:
globs:
alwaysApply: false
---
# Todomill UI Element Addition and Database Schema Patterns

## Overview
This rule documents patterns for adding UI elements to the Todomill Node-RED dashboard and considerations for MongoDB schema changes, based on the TodoLog revert/delete implementation.

## UI Element Addition Pattern

### 1. HTML Template Node Structure
When modifying [Todomill_projectorium/HtmlFromTemplateNode/TodoLog.html](mdc:Todomill_projectorium/HtmlFromTemplateNode/TodoLog.html):

**Action Button Structure:**
```html
<div class="log-actions">
    <button class="action-btn revert-btn"
            ng-class="{loading: entry.loading}"
            ng-if="conditionalDisplay"
            ng-click="confirmFunction(entry)"
            ng-disabled="entry.loading"
            title="Action description">
        <span ng-if="!entry.loading">ðŸ”„ Action</span>
        <span ng-if="entry.loading">âŸ³ Acting...</span>
    </button>
</div>
```

### 2. CSS Styling Patterns
Follow Material Design principles:
```css
.action-btn {
    padding: 6px 12px;
    border-radius: 4px;
    border: 1px solid #e0e0e0;
    min-width: 80px;
    text-align: center;
    font-weight: 500;
    transition: all 0.2s;
}

.action-btn:hover:not(:disabled) {
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.action-btn.loading::after {
    animation: loading-shimmer 1.5s infinite;
}
```

### 3. JavaScript Function Pattern
```javascript
// Confirmation function
scope.confirmAction = function(entry) {
    scope.showConfirmation = true;
    scope.confirmationTitle = 'Confirm Action';
    scope.confirmationMessage = 'Are you sure?';
    scope.entryToProcess = entry;
};

// Actual action function
scope.executeAction = function(entry) {
    entry.loading = true;
    scope.send({
        topic: 'todo/action/request',
        payload: {
            action: 'action_name',
            logId: entry.id || entry.todoId,
            todoId: entry.todoId,
            timestamp: entry.timestamp
        }
    });
};
```

### 4. Message Handling Pattern
Extend the `$watch('msg')` function:
```javascript
scope.$watch('msg', function(newMsg) {
    if (newMsg.topic === 'todo/action/response') {
        scope.handleActionResponse(newMsg);
    }
});
```

## MongoDB Schema Considerations

### 1. Todo Log Collection Structure
```javascript
{
  _id: ObjectId,
  todoId: String,           // Reference to todo item
  operation: String,        // 'create', 'update', 'delete', 'complete'
  timestamp: Date,
  description: String,      // Todo description at time of operation
  project: String,
  changes: [{               // For update operations
    field: String,
    oldValue: Mixed,
    newValue: Mixed
  }],
  metadata: {
    userId: String,         // Who performed the action
    source: String,         // 'web', 'api', 'automation'
    ip: String,
    userAgent: String
  },
  revertable: Boolean,      // Can this operation be reverted?
  reverted: {
    status: Boolean,        // Has this been reverted?
    revertedAt: Date,
    revertedBy: String,
    revertLogId: ObjectId   // Reference to the revert log entry
  }
}
```

### 2. Todo Collection Additions
Add fields to support log operations:
```javascript
{
  // ... existing todo fields
  lastModified: Date,
  modificationCount: Number,
  logHistory: [ObjectId],   // References to log entries
  canRevert: Boolean,       // Computed field for UI
  lastOperation: {
    type: String,
    timestamp: Date,
    logId: ObjectId
  }
}
```

### 3. Revert Operation Schema
For tracking revert operations:
```javascript
{
  originalLogId: ObjectId,  // The log entry being reverted
  revertType: String,       // 'undo_update', 'restore_deleted', 'mark_pending'
  success: Boolean,
  error: String,
  affectedTodoId: String,
  revertData: Mixed         // Data used for revert
}
```

## Integration Points

### 1. Node-RED Flow Requirements
- **Input Node**: Handles UI messages from dashboard
- **Processing Node**: Validates and processes log operations
- **Database Node**: Interacts with MongoDB
- **Response Node**: Sends results back to UI

### 2. Message Topic Conventions
- Request: `todo/[entity]/[action]/request`
- Response: `todo/[entity]/[action]/response`
- Broadcast: `todo/[entity]/[action]/broadcast`

Example: `todo/log/revert/request`, `todo/log/delete/response`

### 3. Error Handling Pattern
All responses should include:
```javascript
{
  success: Boolean,
  data: Mixed,           // Success data
  error: String,         // Error message
  code: String,          // Error code for programmatic handling
  timestamp: Date
}
```

## File Modification Checklist

### Frontend Changes ([Todomill_projectorium/HtmlFromTemplateNode/](mdc:Todomill_projectorium/HtmlFromTemplateNode/))
- [ ] Add HTML elements with proper Angular directives
- [ ] Implement CSS styling with loading states
- [ ] Add JavaScript functions for user interactions
- [ ] Extend message handling for new topics
- [ ] Add confirmation dialogs for destructive actions
- [ ] Initialize state variables in scope.init()

### Backend Integration ([Todomill_projectorium/ExportedNodeRedTabs/](mdc:Todomill_projectorium/ExportedNodeRedTabs/))
- [ ] Update Node-RED flow JSON with new message routes
- [ ] Add database query nodes for new operations
- [ ] Implement validation logic
- [ ] Add error handling and logging
- [ ] Update response formatting

### Database Schema
- [ ] Add new fields to existing collections
- [ ] Create indexes for performance
- [ ] Update validation rules
- [ ] Plan migration strategy for existing data
- [ ] Document schema changes

## Best Practices

### UI/UX
1. **Loading States**: Always show visual feedback during operations
2. **Confirmation**: Require confirmation for destructive actions
3. **Error Handling**: Display user-friendly error messages
4. **Accessibility**: Include proper ARIA labels and keyboard navigation

### Performance
1. **Individual Loading**: Use entry-level loading states, not global
2. **Debouncing**: Prevent rapid-fire button clicks
3. **Pagination**: Handle large datasets with proper pagination
4. **Caching**: Cache frequently accessed data

### Security
1. **Validation**: Validate all user inputs on backend
2. **Authorization**: Check user permissions for operations
3. **Audit Trail**: Log all operations with user context
4. **Rate Limiting**: Prevent abuse of API endpoints

## Testing Considerations
- Test with large datasets (1000+ log entries)
- Verify loading states work correctly
- Test error scenarios and recovery
- Validate MongoDB operations don't create orphaned data
- Check message flow timing in Node-RED

## Related Files
- [Todomill_projectorium/HtmlFromTemplateNode/TodoLog.html](mdc:Todomill_projectorium/HtmlFromTemplateNode/TodoLog.html) - Main implementation example
- [Todomill_projectorium/ExportedNodeRedTabs/](mdc:Todomill_projectorium/ExportedNodeRedTabs/) - Node-RED flow definitions
- [src/Omnispindle/](mdc:src/Omnispindle/) - Python MCP server for MongoDB operations

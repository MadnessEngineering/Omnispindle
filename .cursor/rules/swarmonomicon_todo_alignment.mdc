---
description:
globs:
alwaysApply: false
---
## Swarmonomicon Todo System Update Rules

This set of rules outlines the necessary changes to align the Rust-based Swarmonomicon todo system (`[src/tools/todo.rs](mdc:src/tools/todo.rs)`) with the established Node-RED and Python (Omnispindle) todo and logging schemas.

### 1. Todo Task Structure Alignment

**Goal:** Ensure the `TodoTask` struct in `[src/tools/todo.rs](mdc:src/tools/todo.rs)` matches the field structure used by Omnispindle and Node-RED.

**Current `TodoTask` (Rust - Swarmonomicon):**
```rust
pub struct TodoTask {
    pub id: String,                    // Matches
    pub description: String,           // Matches
    pub enhanced_description: Option<String>, // Matches
    pub priority: TaskPriority,        // Matches (enum, ensure values align)
    pub project: Option<String>,       // Matches
    pub source_agent: Option<String>,  // NEW: Add this field, default to "mcp_server" or similar
    pub target_agent: String,          // Matches (ensure it defaults to "user")
    pub status: TaskStatus,            // Matches (enum, ensure values align)
    pub created_at: i64,               // Matches (timestamp)
    pub completed_at: Option<i64>,     // Matches (timestamp)
    // Potentially missing fields from Node-RED/Python (check if needed):
    // pub due_date: Option<String>,      // (YYYY-MM-DD format)
    // pub duration_minutes: Option<i32>,
    // pub notes: Option<String>,
    // pub ticket: Option<String>,
    // pub last_modified: Option<i64>,
}
```

**Reference Python Structure (implied by Omnispindle/Node-RED):**
```python
{
    "id": "uuid_string",
    "description": "string",
    "enhanced_description": "string", // (markdown)
    "priority": "High" | "Medium" | "Low" | "Initial",
    "project": "string_project_name",
    "source_agent": "string_source_identifier", // e.g., "mcp_server", "swarmonomicon_agent"
    "target_agent": "user" | "system" | "string_agent_name", // default to "user"
    "status": "pending" | "completed" | "review" | "initial",
    "created_at": timestamp_int,
    "completed_at": timestamp_int, // (optional)
    "due_date": "YYYY-MM-DD", // (optional)
    "duration_minutes": int, // (optional)
    "notes": "string_multiline", // (optional)
    "ticket": "string_ticket_ref", // (optional)
    "last_modified": timestamp_int // (optional, updated on any change)
}
```

**Actions:**

1.  **Add `source_agent`:** Modify the `TodoTask` struct in `[src/tools/todo.rs](mdc:src/tools/todo.rs)` to include `pub source_agent: Option<String>`.
    *   When creating new todos in `add_todo`, set this to something like `"swarmonomicon_agent"` or `"mcp_server"` if it's acting on behalf of it.
2.  **Review Optional Fields:** Consider adding `due_date`, `duration_minutes`, `notes`, `ticket`, and `last_modified` to `TodoTask` if these are used or intended to be used by Swarmonomicon and need to be consistent.
3.  **Align Enums:** Ensure `TaskPriority` and `TaskStatus` enum variants in Rust match the string values used in Python/Node-RED (e.g., `TaskPriority::High` should correspond to a string "High"). Check serialization/deserialization if needed.
4.  **Timestamp for `last_modified`:** If `last_modified` is added, ensure it's updated in `update_todo_status` and any other update operations.

### 2. Logging Process Alignment

**Goal:** Implement a logging mechanism in `[src/tools/todo.rs](mdc:src/tools/todo.rs)` that mirrors the Omnispindle `todo_log_service.py`, creating entries in a `todo_logs` collection with the correct schema.

**Reference Log Entry Schema (from `todo_log_service.py`):**
```python
log_entry = {
    'timestamp': datetime, // (datetime object, stored as BSON date)
    'operation': "create" | "update" | "delete" | "complete",
    'todoId': "string_todo_id",
    'description': "string_todo_description", // (this was todoTitle, now description)
    'project': "string_project_name",
    'changes': [], // (Array of change objects for 'update' operations)
    'userAgent': "string_agent_identifier" // (e.g., "swarmonomicon_agent", "Node-RED Dashboard")
}

# Change object structure (for 'update' operation)
change = {
    'field': "string_field_name",
    'oldValue': "mixed_type_value",
    'newValue': "mixed_type_value"
}
```

**Reference Node-RED Log Creation (`[LogTodoOperation.js](mdc:Todomill_projectorium/JavascriptFromFunctionNode/LogTodoOperation.js)`):
```javascript
const logEntry = {
    timestamp: new Date().toISOString(),
    operation: operation,
    todoId: todoId,
    description: description,
    project: project.toLowerCase(),
    changes: changes,
    userAgent: userAgent
};
```

**Actions:**

1.  **Create `LogEntry` Struct:** Define a new struct in Rust, let's call it `LogEntry`, that matches the fields above. Ensure `timestamp` is a `chrono::DateTime<Utc>` and `changes` is `Option<Vec<ChangeEntry>>` where `ChangeEntry` is another struct for field changes.
    ```rust
    #[derive(Serialize, Deserialize, Debug, Clone)]
    struct ChangeEntry {
        field: String,
        #[serde(skip_serializing_if = "Option::is_none")]
        old_value: Option<serde_json::Value>, // Use serde_json::Value for mixed types
        #[serde(skip_serializing_if = "Option::is_none")]
        new_value: Option<serde_json::Value>,
    }

    #[derive(Serialize, Deserialize, Debug, Clone)]
    struct LogEntry {
        timestamp: chrono::DateTime<Utc>,
        operation: String,
        #[serde(rename = "todoId")]
        todo_id: String,
        description: String,
        project: String,
        #[serde(skip_serializing_if = "Option::is_none")]
        changes: Option<Vec<ChangeEntry>>,
        #[serde(rename = "userAgent")]
        user_agent: String,
    }
    ```
2.  **Implement `log_todo_action` Method:** Add a new private async method to `TodoTool` in `[src/tools/todo.rs](mdc:src/tools/todo.rs)`, similar to `log_todo_action` in `todo_log_service.py`.
    *   This method will take `operation` (String), `todo_id` (String), `description` (String), `project` (String), `changes` (Option<Vec<ChangeEntry>>), and `user_agent` (String) as arguments.
    *   It will construct a `LogEntry` and insert it into a `todo_logs` MongoDB collection. Ensure this collection is initialized with appropriate indexes (similar to `todo_log_service.py` lines 82-110).
3.  **Call Logging from Operations:**
    *   In `add_todo`: After successful insertion, call `log_todo_action` with `operation: "create"`, the relevant todo details, and `userAgent: "swarmonomicon_agent"` (or similar).
    *   In `update_todo_status`: Before performing the update, fetch the original todo to get its current `description` and `project`. After a successful update, construct a `changes` vector detailing what changed (e.g., the `status` field, and potentially `completed_at` if status is `Completed`). Call `log_todo_action` with `operation: "update"` (or `"complete"` if status changed to `Completed`).
    *   **Consider Deletion Logging:** If Swarmonomicon will support deleting todos, add a `delete_todo` method and ensure it calls `log_todo_action` with `operation: "delete"`.
4.  **Changes Array for Updates:** When logging an "update" operation, accurately populate the `changes` array. This requires fetching the todo *before* the update to compare old and new values.

### 3. Project Handling and Prediction

**Goal:** Standardize project name handling and ensure AI-based project prediction is robust.

**Reference (`[src/tools/todo.rs](mdc:src/tools/todo.rs)` and Omnispindle patterns):
*   Project names should be normalized (e.g., lowercase, consistent spacing). The Python `validate_project_name` function (in `tools.py`) provides a reference for this.
*   AI project prediction (`predict_project` in `[src/tools/todo.rs](mdc:src/tools/todo.rs)`) exists but should be used as a fallback if a project is not explicitly provided.

**Actions:**

1.  **Project Name Validation/Normalization:** Implement a Rust equivalent of the `validate_project_name` logic from Omnispindle's `tools.py`. This typically involves converting to lowercase and replacing spaces with underscores. Apply this to any project name before storing or logging.
    *   The `add_todo` method in `[src/tools/todo.rs](mdc:src/tools/todo.rs)` uses `final_project`. Ensure this value is normalized.
2.  **Prioritize Explicit Project:** In `add_todo`, if a `project` parameter is provided, it should be used and normalized. The AI-predicted project (`predicted_project`) should only be used if the `project` parameter is `None` or empty.

### 4. Error Handling and Uniqueness

**Goal:** Improve error handling, especially for duplicate todo entries.

**Current (`[src/tools/todo.rs](mdc:src/tools/todo.rs)`):
*   `add_todo` has a unique index on `description` and attempts to create a unique ID by appending a timestamp if a duplicate key error occurs on `id` (this seems to be a misunderstanding, as the unique index is on `description`).

**Actions:**

1.  **Clarify Unique Index:** The unique index is on `description`. If an attempt is made to add a todo with an existing `description`, MongoDB will raise a duplicate key error. The current fallback logic of creating a new `id` will not resolve this if the `description` is the same.
2.  **Handle Duplicate Descriptions:** Decide on the desired behavior for duplicate descriptions:
    *   **Option A (Reject):** If a todo with the same description already exists, return an error to the user/caller indicating the duplicate.
    *   **Option B (Allow with different ID - current partial attempt):** If allowing, the `description` field cannot be unique. The current code (lines 120-148 in `[src/tools/todo.rs](mdc:src/tools/todo.rs)`) attempts a fallback by creating a unique ID if the *initial* insert fails. This is problematic if the failure is due to the unique `description` index. The fallback should likely involve modifying the description or informing the user.
    *   **Recommendation:** For consistency and simplicity, it's often better to enforce unique descriptions and inform the user if they try to add a duplicate. If not, remove the unique index on `description`.
3.  **Robust Error Reporting:** Ensure all database operations and AI calls have clear error handling and logging (using `tracing`) to help diagnose issues.

By implementing these rules, the Swarmonomicon todo system will be much more aligned with the existing Omnispindle/Node-RED ecosystem, leading to better data consistency and more reliable logging.

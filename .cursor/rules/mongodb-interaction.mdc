---
description:
globs:
alwaysApply: false
---
# MongoDB Interaction Patterns

## Database Configuration

**Database**: `swarmonomicon` (from MONGODB_DB env var)
**Collections**:
- `todos` (main todo collection)
- `lessons_learned` (lessons collection)
- `tags_cache` (tags caching)

## Todo Data Structure

The MongoDB collection for todos uses the following schema:

```python
{
  "id": "UUID-formatted string",                    # Primary identifier (not _id)
  "description": "Task description text",
  "project": "Project category name",               # Validated against VALID_PROJECTS
  "status": "pending"|"completed",                  # Default: "pending"
  "priority": "Low"|"Medium"|"High",                # Default: "Medium"
  "target": "user"|"AI assistant name",             # Target agent (not target_agent)
  "created_at": 1640995200,                         # Unix timestamp (int)
  "updated_at": 1640995200,                         # Unix timestamp (int, when updated)
  "completed_at": 1640995200,                       # Unix timestamp (int, when completed)
  "duration": "2h 30m",                             # Human-readable duration string
  "duration_sec": 9000,                             # Duration in seconds
  "metadata": { /* Optional additional fields */ },
  "enhanced_description": "Enhanced description",   # Optional enhanced description
  "notes": "Additional notes"                       # Optional notes
}
```

## Lessons Data Structure

```python
{
  "id": "UUID-formatted string",
  "language": "Programming language or technology",
  "topic": "Brief subject/title",
  "lesson_learned": "Full lesson content",
  "tags": ["tag1", "tag2"],                         # Array of strings
  "created_at": 1640995200                          # Unix timestamp (int)
}
```

## Valid Projects

Projects are validated against this list (case-insensitive):
```python
VALID_PROJECTS = [
    "madness_interactive", "regressiontestkit", "omnispindle",
    "todomill_projectorium", "swarmonomicon", "hammerspoon",
    "lab_management", "cogwyrm", "docker_implementation",
    "documentation", "eventghost", "hammerghost",
    "quality_assurance", "spindlewrit", "inventorium"
]
```

## Python MongoDB Operations (PyMongo)

### Finding Todos

```python
# Get specific todo by ID
todo = collection.find_one({"id": todo_id})

# List todos by status
cursor = collection.find(
    {"status": status.lower()},
    limit=limit
)
results = list(cursor)

# List todos by project
cursor = collection.find(
    {"project": validated_project},
    sort=[("created_at", -1)],
    limit=limit
)

# Search todos with regex
search_query = {"$or": [
    {"description": {"$regex": query, "$options": "i"}},
    {"project": validated_project}
]}
cursor = collection.find(search_query, limit=limit)
```

### Creating Todos

```python
todo = {
    "id": str(uuid.uuid4()),
    "description": description,
    "project": validate_project_name(project),
    "priority": priority,  # "Low", "Medium", "High"
    "status": "pending",
    "target": target_agent,
    "created_at": int(datetime.now(UTC).timestamp())
}
collection.insert_one(todo)
```

### Updating Todos

```python
# Update specific fields
updates = {
    "description": new_description,
    "priority": new_priority,
    "updated_at": int(datetime.now(UTC).timestamp())
}
result = collection.update_one(
    {"id": todo_id},
    {"$set": updates}
)

# Mark as complete
completed_at = int(datetime.now(UTC).timestamp())
updates = {
    "status": "completed",
    "completed_at": completed_at,
    "duration": duration_string,
    "duration_sec": duration_seconds,
    "updated_at": completed_at
}
collection.update_one({"id": todo_id}, {"$set": updates})
```

### Deleting Todos

```python
result = collection.delete_one({"id": todo_id})
```

## Lessons Operations

### Creating Lessons

```python
lesson = {
    "id": str(uuid.uuid4()),
    "language": language,
    "topic": topic,
    "lesson_learned": lesson_learned,
    "tags": tags or [],
    "created_at": int(datetime.now(UTC).timestamp())
}
lessons_collection.insert_one(lesson)
```

### Searching Lessons

```python
# Text search across multiple fields
search_conditions = []
for field in ["topic", "lesson_learned"]:
    search_conditions.append({field: {"$regex": query, "$options": "i"}})
search_query = {"$or": search_conditions}
cursor = lessons_collection.find(search_query, limit=limit)
```

### Aggregating Tags

```python
# Get all unique tags using aggregation
pipeline = [
    {"$project": {"tags": 1}},
    {"$unwind": "$tags"},
    {"$group": {"_id": None, "unique_tags": {"$addToSet": "$tags"}}}
]
result = list(lessons_collection.aggregate(pipeline))
```

## Response Patterns

PyMongo operations return:
- **find_one()**: Single document dict or None
- **find()**: Cursor object (convert to list)
- **insert_one()**: InsertOneResult with inserted_id
- **update_one()**: UpdateResult with matched_count, modified_count
- **delete_one()**: DeleteResult with deleted_count
- **aggregate()**: CommandCursor (convert to list)

## Field Validation & Normalization

### Project Names
```python
def validate_project_name(project: str) -> str:
    project_lower = project.lower()
    if project_lower in VALID_PROJECTS:
        return project_lower
    # Fallback to "madness_interactive"
    return "madness_interactive"
```

### Status Values
- Stored as lowercase: `"pending"`, `"completed"`, 'i
- Input is case-insensitive

### Priority Values
- Stored as: `"Low"`, `"Medium"`, `"High"`
- Input is case-insensitive, defaults to `"Medium"`

### Timestamps
- All timestamps stored as Unix timestamps (int)
- Created with: `int(datetime.now(UTC).timestamp())`
- Displayed with: `datetime.fromtimestamp(timestamp, UTC).strftime(format)`

### Duration Formatting
```python
def _format_duration(seconds):
    # Returns human-readable format like "2h 30m" or "45m"
```

## Error Handling

```python
try:
    result = collection.operation()
    if result.modified_count == 1:
        return create_response(True, data, message)
    else:
        return create_response(False, message="No changes made")
except Exception as e:
    return create_response(False, message=f"Operation failed: {str(e)}")
```

## MQTT Integration

All operations publish status to MQTT topics:
```python
await mqtt_publish(f"status/{os.getenv('DeNa')}/omnispindle/{operation}", message, ctx)
```

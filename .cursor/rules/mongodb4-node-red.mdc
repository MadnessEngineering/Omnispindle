---
description:
globs:
alwaysApply: false
---
# MongoDB4 Node-RED Documentation

## Overview
The MongoDB4 node executes MongoDB collection operations within Node-RED flows.

## Configuration

### Inputs/Options
- **Connection (mongodb-client)** - Select a MongoDB database server connection
- **Mode | msg.mode (string)** - Choose operation type: `'collection'` or `'db'`
- **Collection | msg.collection (string)** - MongoDB database collection name
- **Operation | msg.operation (string)** - Specific operation to run

## Collection Operations

### Common Operations
- **Read**: `find`, `findOne`, `aggregate`
- **Write**: `insertOne`, `insertMany`, `updateOne`, `updateMany`, `deleteOne`, `deleteMany`
- **Legacy**: `insert`, `update`, `delete` (deprecated - not supported in latest driver)

### Database Operations
- `command`, `ping`, `stats`

## Payload Structure

### General Format
```javascript
msg.payload = [arg1, arg2, ...]; // Array of function arguments
```

### Examples

#### Insert Operation
```javascript
msg.payload = [{name: 'Anna', age: 1}];
```

#### Find Operation
```javascript
const query = { age: 22 };
const options = {
    sort: {name: 1},
    projection: {name: 1},
    limit: 10,
    skip: 2
};
msg.payload = [query, options];
```

#### Aggregation Operation
```javascript
const pipeline = [
    { $sort: {age: 1} },
    { $project: { name: 1 } },
    { $limit: 10 }
];
const options = { allowDiskUse: true };
msg.payload = [pipeline, options];
```

## BSON Data Types

### Setup in settings.js
```javascript
functionGlobalContext: {
    mongodb: require("node-red-contrib-mongodb4/node_modules/mongodb")
}
```

### Usage in Function Nodes
```javascript
const {ObjectId, Double, Timestamp} = global.get("mongodb");
msg.payload = [{
    _id: new ObjectId(),
    value: new Double(1.4),
    ts: new Timestamp()
}];
```

## ObjectId Handling

### Automatic Conversion (Deprecated Feature)
- String ObjectIds automatically converted: `"624b527d08e23628e99eb963"` â†’ `ObjectId("624b527d08e23628e99eb963")`
- Works with operators: `{_id: {$in: ["624b527d08e23628e99eb963"]}}`

### Best Practice
Use explicit BSON types instead of automatic conversion:
```javascript
msg.payload = [{_id: new ObjectId("624b527d08e23628e99eb963")}];
```

## Configuration Options

### Output Types
- **toArray** - Returns all results as array
- **forEach** - Streams results (for `find` and `aggregate`)

### MaxTimeMS
- Timeout value in milliseconds
- `0` = no timeout
- Prevents long-running operations

## Node Status Indicators

### Status Tags
- **s**: Number of successful executions
- **err**: Number of failed executions
- **rt**: Last execution runtime in ms

### Status Colors
- **Green**: Last execution successful
- **Blue**: Execution in progress
- **Red**: Last execution failed

## References
- [MongoDB Collection API v6.12](https://mongodb.github.io/node-mongodb-native/6.12/classes/Collection.html)
